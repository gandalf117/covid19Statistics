{"remainingRequest":"/home/artanis/workspace/proj-covid19/node_modules/babel-loader/lib/index.js!/home/artanis/workspace/proj-covid19/src/store/modules/covid19Module.js","dependencies":[{"path":"/home/artanis/workspace/proj-covid19/src/store/modules/covid19Module.js","mtime":1607288194777},{"path":"/home/artanis/workspace/proj-covid19/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/artanis/workspace/proj-covid19/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciOwppbXBvcnQgeyBDb3VudHJ5IH0gZnJvbSAnQC9jbGFzc2VzL2NvdmlkMTkvQ291bnRyeSc7CmltcG9ydCB7IEdsb2JhbFN0YXRzIH0gZnJvbSAnQC9jbGFzc2VzL2NvdmlkMTkvR2xvYmFsU3RhdHMnOwppbXBvcnQgY292aWQxOUFwaSBmcm9tICdAL2FwaS9jb3ZpZDE5QXBpJzsKaW1wb3J0IHsgRXZlbnRCdXMgfSBmcm9tICdAL3V0aWxzJzsKdmFyIHN0YXRlID0gewogIGNvdW50cmllczogW10sCiAgZ2xvYmFsU3RhdHM6IHt9Cn07CnZhciBnZXR0ZXJzID0gewogIGdldENvdW50cnlGb3JJZDogZnVuY3Rpb24gZ2V0Q291bnRyeUZvcklkKHN0YXRlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKGlkKSB7CiAgICAgIHJldHVybiBzdGF0ZS5jb3VudHJpZXMuZmluZChmdW5jdGlvbiAoY291bnRyeSkgewogICAgICAgIHJldHVybiBjb3VudHJ5LmlkID09PSBpZDsKICAgICAgfSk7CiAgICB9OwogIH0KfTsKdmFyIG11dGF0aW9ucyA9IHsKICBzZXRTdGF0ZUdsb2JhbFN0YXRzOiBmdW5jdGlvbiBzZXRTdGF0ZUdsb2JhbFN0YXRzKHN0YXRlLCBkYXRhKSB7CiAgICBzdGF0ZS5nbG9iYWxTdGF0cyA9IGRhdGE7CiAgfSwKICBzZXRTdGF0ZUNvdW50cmllczogZnVuY3Rpb24gc2V0U3RhdGVDb3VudHJpZXMoc3RhdGUsIGRhdGEpIHsKICAgIHN0YXRlLmNvdW50cmllcyA9IGRhdGE7CiAgfQp9Owp2YXIgYWN0aW9ucyA9IHsKICBnZXRDb3ZpZDE5U3VtbWFyeTogZnVuY3Rpb24gZ2V0Q292aWQxOVN1bW1hcnkoX3JlZikgewogICAgdmFyIGNvbW1pdCA9IF9yZWYuY29tbWl0OwogICAgRXZlbnRCdXMuJGVtaXQoJ3NldENvcmVMb2FkZXInLCB7CiAgICAgIHNob3c6IHRydWUsCiAgICAgIHVzZUNvdW50ZXI6IGZhbHNlCiAgICB9KTsKICAgIHJldHVybiBjb3ZpZDE5QXBpLmdldFN1bW1hcnkoKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICB2YXIgY291bnRyaWVzID0gQ291bnRyeS5hc0l0ZW1zKHJlc3BvbnNlLmRhdGEuQ291bnRyaWVzLCBDb3VudHJ5KTsKICAgICAgdmFyIGdsb2JhbFN0YXRzID0gbmV3IEdsb2JhbFN0YXRzKHJlc3BvbnNlLmRhdGEuR2xvYmFsKTsKICAgICAgY29tbWl0KCdzZXRTdGF0ZUNvdW50cmllcycsIGNvdW50cmllcyk7CiAgICAgIGNvbW1pdCgnc2V0U3RhdGVHbG9iYWxTdGF0cycsIGdsb2JhbFN0YXRzKTsKICAgICAgcmV0dXJuIHRydWU7CiAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgIHRocm93IGVycjsKICAgIH0pLmZpbmFsbHkoZnVuY3Rpb24gKCkgewogICAgICBFdmVudEJ1cy4kZW1pdCgnc2V0Q29yZUxvYWRlcicsIHsKICAgICAgICBzaG93OiBmYWxzZQogICAgICB9KTsKICAgIH0pOwogIH0sCiAgZ2V0SGlzdG9yeURhdGE6IGZ1bmN0aW9uIGdldEhpc3RvcnlEYXRhKF9yZWYyLCBjb3VudHJ5SWQpIHsKICAgIHZhciBjb21taXQgPSBfcmVmMi5jb21taXQsCiAgICAgICAgZ2V0dGVycyA9IF9yZWYyLmdldHRlcnM7CiAgICBFdmVudEJ1cy4kZW1pdCgnc2V0Q29yZUxvYWRlcicsIHsKICAgICAgc2hvdzogdHJ1ZSwKICAgICAgdXNlQ291bnRlcjogZmFsc2UKICAgIH0pOwogICAgcmV0dXJuIGNvdmlkMTlBcGkuZ2V0SGlzdG9yeURhdGEoY291bnRyeUlkKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICB2YXIgY291bnRyeSA9IGdldHRlcnMuZ2V0Q291bnRyeUZvcklkKGNvdW50cnlJZCk7CiAgICAgIGNvdW50cnkuc2V0SGlzdG9yeURhdGEocmVzcG9uc2UuZGF0YSk7CiAgICAgIHJldHVybiB0cnVlOwogICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICB0aHJvdyBlcnI7CiAgICB9KS5maW5hbGx5KGZ1bmN0aW9uICgpIHsKICAgICAgRXZlbnRCdXMuJGVtaXQoJ3NldENvcmVMb2FkZXInLCB7CiAgICAgICAgc2hvdzogZmFsc2UKICAgICAgfSk7CiAgICB9KTsKICB9Cn07CmV4cG9ydCBkZWZhdWx0IHsKICBzdGF0ZTogc3RhdGUsCiAgZ2V0dGVyczogZ2V0dGVycywKICBtdXRhdGlvbnM6IG11dGF0aW9ucywKICBhY3Rpb25zOiBhY3Rpb25zCn07"},{"version":3,"sources":["/home/artanis/workspace/proj-covid19/src/store/modules/covid19Module.js"],"names":["Country","GlobalStats","covid19Api","EventBus","state","countries","globalStats","getters","getCountryForId","id","find","country","mutations","setStateGlobalStats","data","setStateCountries","actions","getCovid19Summary","commit","$emit","show","useCounter","getSummary","then","response","asItems","Countries","Global","catch","err","finally","getHistoryData","countryId","setHistoryData"],"mappings":"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","sourcesContent":["import { Country } from '@/classes/covid19/Country'\nimport { GlobalStats } from '@/classes/covid19/GlobalStats'\nimport covid19Api from '@/api/covid19Api'\nimport { EventBus } from '@/utils'\n\nconst state = {\n    countries: [],\n    globalStats: {}\n}\n\nconst getters = {\n    getCountryForId: state => (id) => {\n        return state.countries.find(country => country.id === id)\n    }\n}\n\nconst mutations = {\n    setStateGlobalStats: (state, data) => {\n        state.globalStats = data\n    },    \n    setStateCountries: (state, data) => {\n        state.countries = data\n    }\n}\n\nconst actions = {\n  getCovid19Summary ({ commit }) {\n    EventBus.$emit('setCoreLoader', { show: true, useCounter: false })\n    return covid19Api.getSummary().then(response => {\n        let countries = Country.asItems(response.data.Countries, Country)\n        let globalStats = new GlobalStats(response.data.Global)\n        commit('setStateCountries', countries)\n        commit('setStateGlobalStats', globalStats)\n        return true\n    }).catch((err) => {\n        throw err\n    }).finally(() => {\n        EventBus.$emit('setCoreLoader', { show: false })\n    })\n  },\n  getHistoryData ({ commit, getters }, countryId) {\n      EventBus.$emit('setCoreLoader', { show: true, useCounter: false })\n      return covid19Api.getHistoryData(countryId).then(response => {\n            let country = getters.getCountryForId(countryId)\n            country.setHistoryData(response.data)\n            return true\n      }).catch((err) => {\n          throw err\n      }).finally(() => {\n          EventBus.$emit('setCoreLoader', { show: false })\n      })      \n  }\n}\n\nexport default {\n    state,\n    getters,\n    mutations,\n    actions\n}\n"]}]}