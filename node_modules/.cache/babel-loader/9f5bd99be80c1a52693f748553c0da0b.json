{"remainingRequest":"/home/artanis/workspace/proj-covid19/node_modules/babel-loader/lib/index.js!/home/artanis/workspace/proj-covid19/src/store/modules/covid19Module.js","dependencies":[{"path":"/home/artanis/workspace/proj-covid19/src/store/modules/covid19Module.js","mtime":1607263015756},{"path":"/home/artanis/workspace/proj-covid19/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/artanis/workspace/proj-covid19/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgQ291bnRyeSB9IGZyb20gJ0AvY2xhc3Nlcy9jb3ZpZDE5L0NvdW50cnknOwppbXBvcnQgY292aWQxOUFwaSBmcm9tICdAL2FwaS9jb3ZpZDE5QXBpJzsKaW1wb3J0IEh0dHBTdGF0dXMgZnJvbSAnQC9jbGFzc2VzL2h0dHAvSHR0cFN0YXR1cyc7CnZhciBzdGF0ZSA9IHsKICBjb3VudHJpZXM6IFtdCn07CnZhciBtdXRhdGlvbnMgPSB7CiAgc2V0U3RhdGVDb3VudHJpZXM6IGZ1bmN0aW9uIHNldFN0YXRlQ291bnRyaWVzKHN0YXRlLCBkYXRhKSB7CiAgICBzdGF0ZS5jb3VudHJpZXMgPSBkYXRhOwogIH0KfTsKdmFyIGFjdGlvbnMgPSB7CiAgZ2V0Q292aWQxOVN1bW1hcnk6IGZ1bmN0aW9uIGdldENvdmlkMTlTdW1tYXJ5KF9yZWYpIHsKICAgIHZhciBjb21taXQgPSBfcmVmLmNvbW1pdCwKICAgICAgICBkaXNwYXRjaCA9IF9yZWYuZGlzcGF0Y2g7CiAgICByZXR1cm4gY292aWQxOUFwaS5nZXRTdW1tYXJ5KCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgY29uc29sZS5sb2coJ3Jlc3BvbnNlOicsIENvdW50cnkuYXNJdGVtcyhyZXNwb25zZS5kYXRhLmNvdW50cmllcykpOwogICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICB0aHJvdyBlcnI7CiAgICB9KTsKICB9Cn07CmV4cG9ydCBkZWZhdWx0IHsKICBzdGF0ZTogc3RhdGUsCiAgbXV0YXRpb25zOiBtdXRhdGlvbnMsCiAgYWN0aW9uczogYWN0aW9ucwp9Ow=="},{"version":3,"sources":["/home/artanis/workspace/proj-covid19/src/store/modules/covid19Module.js"],"names":["Country","covid19Api","HttpStatus","state","countries","mutations","setStateCountries","data","actions","getCovid19Summary","commit","dispatch","getSummary","then","response","console","log","asItems","catch","err"],"mappings":"AAAA,SAASA,OAAT,QAAwB,2BAAxB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AAEA,IAAMC,KAAK,GAAG;AACVC,EAAAA,SAAS,EAAE;AADD,CAAd;AAIA,IAAMC,SAAS,GAAG;AACdC,EAAAA,iBAAiB,EAAE,2BAACH,KAAD,EAAQI,IAAR,EAAiB;AAChCJ,IAAAA,KAAK,CAACC,SAAN,GAAkBG,IAAlB;AACH;AAHa,CAAlB;AAMA,IAAMC,OAAO,GAAG;AACdC,EAAAA,iBADc,mCAC2B;AAAA,QAApBC,MAAoB,QAApBA,MAAoB;AAAA,QAAZC,QAAY,QAAZA,QAAY;AACvC,WAAQV,UAAU,CAACW,UAAX,GAAwBC,IAAxB,CAA6B,UAAAC,QAAQ,EAAI;AAC7CC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBhB,OAAO,CAACiB,OAAR,CAAgBH,QAAQ,CAACP,IAAT,CAAcH,SAA9B,CAAzB;AACH,KAFO,EAELc,KAFK,CAEC,UAACC,GAAD,EAAS;AACd,YAAMA,GAAN;AACH,KAJO,CAAR;AAKD;AAPa,CAAhB;AAUA,eAAe;AACXhB,EAAAA,KAAK,EAALA,KADW;AAEXE,EAAAA,SAAS,EAATA,SAFW;AAGXG,EAAAA,OAAO,EAAPA;AAHW,CAAf","sourcesContent":["import { Country } from '@/classes/covid19/Country'\nimport covid19Api from '@/api/covid19Api'\nimport HttpStatus from '@/classes/http/HttpStatus'\n\nconst state = {\n    countries: []\n}\n\nconst mutations = {\n    setStateCountries: (state, data) => {\n        state.countries = data\n    }\n}\n\nconst actions = {\n  getCovid19Summary ({ commit, dispatch }) {\n    return  covid19Api.getSummary().then(response => {\n        console.log('response:', Country.asItems(response.data.countries))\n    }).catch((err) => {\n        throw err\n    })\n  }\n}\n\nexport default {\n    state,\n    mutations,\n    actions\n}\n"]}]}